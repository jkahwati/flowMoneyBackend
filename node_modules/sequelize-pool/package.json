{
  "_args": [
    [
      {
        "raw": "sequelize-pool@^1.0.2",
        "scope": null,
        "escapedName": "sequelize-pool",
        "name": "sequelize-pool",
        "rawSpec": "^1.0.2",
        "spec": ">=1.0.2 <2.0.0",
        "type": "range"
      },
      "/home/jeka/node-workspace/flowMoneyBackend/node_modules/sequelize"
    ]
  ],
  "_from": "sequelize-pool@^1.0.2",
  "_hasShrinkwrap": false,
  "_id": "sequelize-pool@1.0.2",
  "_location": "/sequelize-pool",
  "_nodeVersion": "8.11.3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/sequelize-pool_1.0.2_1551451448295_0.3191605340475441"
  },
  "_npmUser": {
    "name": "sushantdhiman",
    "email": "sushantdhiman@outlook.com"
  },
  "_npmVersion": "6.4.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "sequelize-pool@^1.0.2",
    "scope": null,
    "escapedName": "sequelize-pool",
    "name": "sequelize-pool",
    "rawSpec": "^1.0.2",
    "spec": ">=1.0.2 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/sequelize"
  ],
  "_resolved": "https://registry.npmjs.org/sequelize-pool/-/sequelize-pool-1.0.2.tgz",
  "_shasum": "89c767882bbdb8a41dac66922ed9820939a5401e",
  "_shrinkwrap": null,
  "_spec": "sequelize-pool@^1.0.2",
  "_where": "/home/jeka/node-workspace/flowMoneyBackend/node_modules/sequelize",
  "author": {
    "name": "Sushant",
    "email": "sushantdhiman@outlook.com"
  },
  "bugs": {
    "url": "https://github.com/sushantdhiman/sequelize-pool/issues"
  },
  "dependencies": {
    "bluebird": "^3.5.3"
  },
  "description": "Resource pooling for Node.JS",
  "devDependencies": {
    "eslint": "^5.14.1",
    "eslint-config-prettier": "^4.1.0",
    "eslint-plugin-prettier": "^3.0.1",
    "prettier": "1.16.4",
    "tap": "^12.5.3"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-VMKl/gCCdIvB1gFZ7p+oqLFEyZEz3oMMYjkKvfEC7GoO9bBcxmfOOU9RdkoltfXGgBZFigSChihRly2gKtsh2w==",
    "shasum": "89c767882bbdb8a41dac66922ed9820939a5401e",
    "tarball": "https://registry.npmjs.org/sequelize-pool/-/sequelize-pool-1.0.2.tgz",
    "fileCount": 5,
    "unpackedSize": 20720,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJceUU5CRA9TVsSAnZWagAAss8P/3pzAuxgqHhLUx3lwuyj\neY/oQ16scz/e2IraGdoy/8HHkziZ1PlcreYyGll5Bpd8au7yvmKJp/EW77OW\nMz0a49c0YubzL2rVrcIMeDjnUA9/4vs/ZaCGvVXj94axqfJ16ogymIsvGhb9\nL+KHMaeH8yKFZNnWwCjlAhgJj+sBQPPIbaNRRxyYuBa8e0sKb6jo9JBl3eU8\neAbtr1/gmeYcpeiUE7tIgw1p7IutBbaNPhSfAIEKzXSUULK8xpPxS0xInkAe\nap2zKIfCF9kEv6z1mt+dkxD6UILDj73zhS2nKzdZ0c6JoJDtN9eNb8MQEJtr\nLxX8VTqtSNT67rEPJ1bI6p8580wR4x2tp0BfM507JI6gSatD7JQaHFH4QUFY\nnt+rLG/R/vbxv2xFaLWXdlXj4ta1KIAGMOShWKYGQOz4mxY0PgWsTUXEZLDl\nyt+vzWX6b7XoIx7zOztJI4Gha1kNDE3/fhUaxI76JmRS6qVl4okT4daPiwp5\nD8ZQ3rl7gsp0M0/GdnOx7CEl4K+qQVmotKbZXveAHFMy+8IDiiOMLxmiOnED\nYXpEJMDmd0UDNx7UutW7GMXjHUrvdYwi4HAv71tcikVCCnxgTDqeTABDct/d\n9BW3QjKXSQyCEsGJfLe8hTLbibNkTD5zsVt9HYzr54qRvqbebSwFQBXrfkXh\nWHFi\r\n=sYKu\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">= 6.0.0"
  },
  "files": [
    "lib"
  ],
  "gitHead": "4ba723db0f5c81ea53058de75bbd11fbc59fda78",
  "homepage": "https://github.com/sushantdhiman/sequelize-pool#readme",
  "keywords": [
    "pool",
    "pooling",
    "throttle",
    "sequelize"
  ],
  "license": "MIT",
  "main": "lib/Pool.js",
  "maintainers": [
    {
      "name": "sushantdhiman",
      "email": "sushantdhiman@outlook.com"
    }
  ],
  "name": "sequelize-pool",
  "optionalDependencies": {},
  "readme": "# sequelize-pool\n\n![npm](https://img.shields.io/npm/v/sequelize-pool.svg?style=flat-square)\n![Travis (.org)](https://img.shields.io/travis/sushantdhiman/sequelize-pool.svg?style=flat-square)\n\n  Resource pool. Can be used to reuse or throttle expensive resources such as\n  database connections.\n\n  This is a fork from [generic-pool@v2.5](https://github.com/coopernurse/node-pool/tree/v2.5).\n\n## Installation\n\n```bash\n$ npm install --save sequelize-pool\n$ yarn add sequelize-pool\n```\n\n## Example\n\n### Step 1 - Create pool using a factory object\n\n```js\n// Create a MySQL connection pool\nvar Pool = require('sequelize-pool').Pool;\nvar mysql2 = require('mysql2/promise');\n\nvar pool = new Pool({\n    name     : 'mysql',\n    create   : function() {\n      // return Promise\n      return mysql2.createConnection({\n        user: 'scott',\n        password: 'tiger',\n        database:'mydb'\n      });\n    },\n    destroy  : function(client) { client.end(); },\n    max      : 10,\n    // optional. if you set this, make sure to drain() (see step 3)\n    min      : 2,\n    // Delay in milliseconds after which available resources in the pool will be destroyed.\n    idleTimeoutMillis : 30000,\n    // Delay in milliseconds after which pending acquire request in the pool will be rejected.\n    acquireTimeoutMillis: 30000,\n     // Function, defaults to console.log\n    log : true\n});\n```\n\n### Step 2 - Use pool in your code to acquire/release resources\n\n```js\n// acquire connection\npool.acquire().then(connection => {\n  client.query(\"select * from foo\", [], function() {\n  // return object back to pool\n    pool.release(client);\n  });\n});\n```\n\n### Step 3 - Drain pool during shutdown (optional)\n\nIf you are shutting down a long-lived process, you may notice\nthat node fails to exit for 30 seconds or so.  This is a side\neffect of the idleTimeoutMillis behaviour -- the pool has a\nsetTimeout() call registered that is in the event loop queue, so\nnode won't terminate until all resources have timed out, and the pool\nstops trying to manage them.\n\nThis behaviour will be more problematic when you set factory.min > 0,\nas the pool will never become empty, and the setTimeout calls will\nnever end.\n\nIn these cases, use the pool.drain() function.  This sets the pool\ninto a \"draining\" state which will gracefully wait until all\nidle resources have timed out.  For example, you can call:\n\n```js\n// Only call this once in your application -- at the point you want\n// to shutdown and stop using this pool.\npool.drain().then(() => pool.destroyAllNow());\n```\n\nIf you do this, your node process will exit gracefully.\n\n## Draining\n\nIf you know would like to terminate all the resources in your pool before\ntheir timeouts have been reached, you can use `destroyAllNow()` in conjunction\nwith `drain()`:\n\n```js\npool.drain().then(() => pool.destroyAllNow());\n```\n\nOne side-effect of calling `drain()` is that subsequent calls to `acquire()`\nwill throw an Error.\n\n## Pool info\n\nThe following functions will let you get information about the pool:\n\n```js\n// returns factory.name for this pool\npool.name\n\n// returns number of resources in the pool regardless of\n// whether they are free or in use\npool.size\n\n// returns number of unused resources in the pool\npool.available\n\n// returns number of callers waiting to acquire a resource\npool.waiting\n\n// returns number of maxixmum number of resources allowed by ppol\npool.maxSize\n\n// returns number of minimum number of resources allowed by ppol\npool.minSize\n\n```\n\n## Run Tests\n\n    $ npm install\n    $ npm test",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/sushantdhiman/sequelize-pool.git"
  },
  "scripts": {
    "lint": "eslint lib test",
    "pretty": "prettier lib/**/*.js test/**/*.js --write",
    "test": "npm run lint && npm run test:raw",
    "test:raw": "tap test/**/*-test.js"
  },
  "version": "1.0.2"
}
